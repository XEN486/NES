// This was generated by a dumb python script! Don't edit!! //

impl<'a> CPU<'a> {
    pub fn trace(&mut self) -> String {
        let op = self.mem_read(self.pc);
        match op {
            0x69 => { // ADC IMM
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Immediate);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ADC {}", format!("#${:02X}", address));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x65 => { // ADC ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ADC {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x75 => { // ADC ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ADC {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x6d => { // ADC ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ADC {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x7d => { // ADC ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ADC {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x79 => { // ADC ABSY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ADC {}", format!("${:04X},Y @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x61 => { // ADC INDX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ADC {}", format!("(${:02X},X) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.x)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x71 => { // ADC INDY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ADC {}", format!("(${:02X},Y) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.y)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x0b => { // ANC IMM
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Immediate);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ANC {}", format!("#${:02X}", address));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x2b => { // ANC IMM
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Immediate);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ANC {}", format!("#${:02X}", address));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x29 => { // AND IMM
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Immediate);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("AND {}", format!("#${:02X}", address));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x25 => { // AND ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("AND {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x35 => { // AND ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("AND {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x2d => { // AND ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("AND {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x3d => { // AND ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("AND {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x39 => { // AND ABSY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("AND {}", format!("${:04X},Y @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x21 => { // AND INDX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("AND {}", format!("(${:02X},X) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.x)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x31 => { // AND INDY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("AND {}", format!("(${:02X},Y) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.y)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x0a => { // ASL ACC
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Accumulator);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ASL {}", "A ");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x06 => { // ASL ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ASL {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x16 => { // ASL ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ASL {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x0e => { // ASL ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ASL {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x1e => { // ASL ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ASL {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x90 => { // BCC REL
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Relative);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("BCC {}", format!("${:04X}", (self.pc as usize + 2).wrapping_add((address as i8) as usize)));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xB0 => { // BCS REL
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Relative);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("BCS {}", format!("${:04X}", (self.pc as usize + 2).wrapping_add((address as i8) as usize)));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xF0 => { // BEQ REL
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Relative);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("BEQ {}", format!("${:04X}", (self.pc as usize + 2).wrapping_add((address as i8) as usize)));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x30 => { // BMI REL
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Relative);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("BMI {}", format!("${:04X}", (self.pc as usize + 2).wrapping_add((address as i8) as usize)));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xD0 => { // BNE REL
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Relative);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("BNE {}", format!("${:04X}", (self.pc as usize + 2).wrapping_add((address as i8) as usize)));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x10 => { // BPL REL
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Relative);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("BPL {}", format!("${:04X}", (self.pc as usize + 2).wrapping_add((address as i8) as usize)));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x50 => { // BVC REL
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Relative);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("BVC {}", format!("${:04X}", (self.pc as usize + 2).wrapping_add((address as i8) as usize)));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x70 => { // BVS REL
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Relative);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("BVS {}", format!("${:04X}", (self.pc as usize + 2).wrapping_add((address as i8) as usize)));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x24 => { // BIT ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("BIT {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x2c => { // BIT ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("BIT {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x00 => { // BRK IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("BRK {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x18 => { // CLC IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("CLC {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xd8 => { // CLD IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("CLD {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x58 => { // CLI IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("CLI {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xb8 => { // CLV IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("CLV {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xea => { // NOP IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x48 => { // PHA IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("PHA {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x68 => { // PLA IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("PLA {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x08 => { // PHP IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("PHP {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x28 => { // PLP IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("PLP {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x40 => { // RTI IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("RTI {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x60 => { // RTS IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("RTS {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x38 => { // SEC IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SEC {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xf8 => { // SED IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SED {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x78 => { // SEI IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SEI {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xaa => { // TAX IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("TAX {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x8a => { // TXA IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("TXA {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xa8 => { // TAY IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("TAY {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x98 => { // TYA IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("TYA {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xba => { // TSX IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("TSX {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x9a => { // TXS IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("TXS {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xc9 => { // CMP IMM
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Immediate);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("CMP {}", format!("#${:02X}", address));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xc5 => { // CMP ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("CMP {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xd5 => { // CMP ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("CMP {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xcd => { // CMP ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("CMP {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xdd => { // CMP ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("CMP {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xd9 => { // CMP ABSY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("CMP {}", format!("${:04X},Y @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xc1 => { // CMP INDX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("CMP {}", format!("(${:02X},X) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.x)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xd1 => { // CMP INDY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("CMP {}", format!("(${:02X},Y) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.y)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xe0 => { // CPX IMM
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Immediate);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("CPX {}", format!("#${:02X}", address));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xe4 => { // CPX ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("CPX {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xec => { // CPX ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("CPX {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xc0 => { // CPY IMM
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Immediate);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("CPY {}", format!("#${:02X}", address));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xc4 => { // CPY ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("CPY {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xcc => { // CPY ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("CPY {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xc6 => { // DEC ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("DEC {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xd6 => { // DEC ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("DEC {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xce => { // DEC ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("DEC {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xde => { // DEC ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("DEC {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xca => { // DEX IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("DEX {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x88 => { // DEY IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("DEY {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xe8 => { // INX IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("INX {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xc8 => { // INY IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("INY {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x49 => { // EOR IMM
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Immediate);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("EOR {}", format!("#${:02X}", address));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x45 => { // EOR ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("EOR {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x55 => { // EOR ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("EOR {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x4d => { // EOR ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("EOR {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x5d => { // EOR ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("EOR {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x59 => { // EOR ABSY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("EOR {}", format!("${:04X},Y @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x41 => { // EOR INDX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("EOR {}", format!("(${:02X},X) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.x)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x51 => { // EOR INDY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("EOR {}", format!("(${:02X},Y) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.y)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xe6 => { // INC ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("INC {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xf6 => { // INC ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("INC {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xee => { // INC ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("INC {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xfe => { // INC ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("INC {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x4c => { // JMP ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("JMP {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x6c => { // JMP IND
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Indirect);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                let jmp_addr = if address & 0x00FF == 0x00FF {
                    let lo = self.mem_read(address2);
                    let hi = self.mem_read(address2 & 0xFF00);
                    (hi as u16) << 8 | (lo as u16)
                } else {
                    self.mem_read_u16(address2)
                };
                let instruction: String = format!("JMP {}", format!("(${:04x}) = {:04x}", address, jmp_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x20 => { // JSR ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("JSR {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xa9 => { // LDA IMM
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Immediate);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LDA {}", format!("#${:02X}", address));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xa5 => { // LDA ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LDA {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xb5 => { // LDA ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LDA {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xad => { // LDA ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LDA {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xbd => { // LDA ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LDA {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xb9 => { // LDA ABSY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LDA {}", format!("${:04X},Y @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xa1 => { // LDA INDX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LDA {}", format!("(${:02X},X) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.x)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xb1 => { // LDA INDY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LDA {}", format!("(${:02X},Y) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.y)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xa2 => { // LDX IMM
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Immediate);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LDX {}", format!("#${:02X}", address));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xa6 => { // LDX ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LDX {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xb6 => { // LDX ZPY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LDX {}", format!("${:02X},Y @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xae => { // LDX ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LDX {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xbe => { // LDX ABSY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LDX {}", format!("${:04X},Y @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xa0 => { // LDY IMM
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Immediate);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LDY {}", format!("#${:02X}", address));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xa4 => { // LDY ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LDY {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xb4 => { // LDY ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LDY {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xac => { // LDY ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LDY {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xbc => { // LDY ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LDY {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x4a => { // LSR ACC
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Accumulator);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LSR {}", "A ");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x46 => { // LSR ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LSR {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x56 => { // LSR ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LSR {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x4e => { // LSR ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LSR {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x5e => { // LSR ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("LSR {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x09 => { // ORA IMM
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Immediate);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ORA {}", format!("#${:02X}", address));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x05 => { // ORA ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ORA {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x15 => { // ORA ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ORA {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x0d => { // ORA ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ORA {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x1d => { // ORA ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ORA {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x19 => { // ORA ABSY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ORA {}", format!("${:04X},Y @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x01 => { // ORA INDX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ORA {}", format!("(${:02X},X) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.x)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x11 => { // ORA INDY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ORA {}", format!("(${:02X},Y) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.y)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x2a => { // ROL ACC
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Accumulator);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ROL {}", "A ");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x26 => { // ROL ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ROL {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x36 => { // ROL ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ROL {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x2e => { // ROL ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ROL {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x3e => { // ROL ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ROL {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x6a => { // ROR ACC
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Accumulator);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ROR {}", "A ");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x66 => { // ROR ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ROR {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x76 => { // ROR ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ROR {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x6e => { // ROR ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ROR {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x7e => { // ROR ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ROR {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xe9 => { // SBC IMM
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Immediate);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SBC {}", format!("#${:02X}", address));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xe5 => { // SBC ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SBC {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xf5 => { // SBC ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SBC {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xed => { // SBC ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SBC {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xfd => { // SBC ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SBC {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xf9 => { // SBC ABSY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SBC {}", format!("${:04X},Y @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xe1 => { // SBC INDX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SBC {}", format!("(${:02X},X) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.x)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xf1 => { // SBC INDY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SBC {}", format!("(${:02X},Y) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.y)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x85 => { // STA ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("STA {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x95 => { // STA ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("STA {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x8d => { // STA ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("STA {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x9d => { // STA ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("STA {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x99 => { // STA ABSY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("STA {}", format!("${:04X},Y @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x81 => { // STA INDX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("STA {}", format!("(${:02X},X) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.x)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x91 => { // STA INDY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("STA {}", format!("(${:02X},Y) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.y)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x86 => { // STX ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("STX {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x96 => { // STX ZPY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("STX {}", format!("${:02X},Y @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x8e => { // STX ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("STX {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x84 => { // STY ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("STY {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x94 => { // STY ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("STY {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x8c => { // STY ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("STY {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x04 => { // NOP ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x44 => { // NOP ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x64 => { // NOP ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x14 => { // NOP ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x34 => { // NOP ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x54 => { // NOP ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x74 => { // NOP ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xd4 => { // NOP ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xf4 => { // NOP ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x0c => { // NOP ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x1c => { // NOP ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x3c => { // NOP ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x5c => { // NOP ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x7c => { // NOP ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xdc => { // NOP ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xfc => { // NOP ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x1a => { // NOP IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x3a => { // NOP IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x5a => { // NOP IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x7a => { // NOP IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xda => { // NOP IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xfa => { // NOP IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("NOP {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x02 => { // HLT IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("HLT {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x12 => { // HLT IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("HLT {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x22 => { // HLT IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("HLT {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x32 => { // HLT IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("HLT {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x42 => { // HLT IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("HLT {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x52 => { // HLT IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("HLT {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x62 => { // HLT IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("HLT {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x72 => { // HLT IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("HLT {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x92 => { // HLT IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("HLT {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xb2 => { // HLT IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("HLT {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xd2 => { // HLT IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("HLT {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xf2 => { // HLT IMP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Implied);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("HLT {}", "");
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x80 => { // SKB IMM
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Immediate);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SKB {}", format!("#${:02X}", address));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x82 => { // SKB IMM
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Immediate);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SKB {}", format!("#${:02X}", address));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x89 => { // SKB IMM
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Immediate);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SKB {}", format!("#${:02X}", address));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xc2 => { // SKB IMM
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Immediate);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SKB {}", format!("#${:02X}", address));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xe2 => { // SKB IMM
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Immediate);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SKB {}", format!("#${:02X}", address));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x07 => { // SLO ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SLO {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x17 => { // SLO ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SLO {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x0f => { // SLO ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SLO {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x1f => { // SLO ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SLO {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x1b => { // SLO ABSY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SLO {}", format!("${:04X},Y @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x03 => { // SLO INDX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SLO {}", format!("(${:02X},X) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.x)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x13 => { // SLO INDY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SLO {}", format!("(${:02X},Y) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.y)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xe7 => { // ISC ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ISC {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xf7 => { // ISC ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ISC {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xef => { // ISC ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ISC {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xff => { // ISC ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ISC {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xfb => { // ISC ABSY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ISC {}", format!("${:04X},Y @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xe3 => { // ISC INDX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ISC {}", format!("(${:02X},X) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.x)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0xf3 => { // ISC INDY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("ISC {}", format!("(${:02X},Y) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.y)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x47 => { // SRE ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SRE {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x57 => { // SRE ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SRE {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x4f => { // SRE ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SRE {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x5f => { // SRE ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SRE {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x5b => { // SRE ABSY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SRE {}", format!("${:04X},Y @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x43 => { // SRE INDX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SRE {}", format!("(${:02X},X) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.x)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x53 => { // SRE INDY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("SRE {}", format!("(${:02X},Y) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.y)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x67 => { // RRA ZP
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPage);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("RRA {}", format!("${:02X} = {:02X}", mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x77 => { // RRA ZPX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::ZeroPageX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("RRA {}", format!("${:02X},X @ {:02X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x6f => { // RRA ABS
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let _address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::Absolute);
                self.pc = self.pc.wrapping_sub(1);
                
                let _stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("RRA {}", format!("${:04X}", mem_addr));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x7f => { // RRA ABSX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("RRA {}", format!("${:04X},X @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x7b => { // RRA ABSY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1)), self.mem_read(self.pc.wrapping_add(2))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::AbsoluteY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("RRA {}", format!("${:04X},Y @ {:04X} = {:02X}", address, mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x63 => { // RRA INDX
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectX);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("RRA {}", format!("(${:02X},X) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.x)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            0x73 => { // RRA INDY
                let byte_values: Vec<u8> = vec![self.mem_read(self.pc.wrapping_add(0)), self.mem_read(self.pc.wrapping_add(1))];

                let address: u8 = self.mem_read(self.pc.wrapping_add(1));
                
                self.pc = self.pc.wrapping_add(1);
                let mem_addr: u16 = self.get_operand_address(&AddressingMode::IndirectY);
                self.pc = self.pc.wrapping_sub(1);
                
                let stored_value: u8 = self.mem_read(mem_addr);
                let _address2: u16 = self.mem_read_u16(self.pc.wrapping_add(1));
                
                let instruction: String = format!("RRA {}", format!("(${:02X},Y) @ {:02X} = {:04X} = {:02X}", address, (address.wrapping_add(self.registers.y)), mem_addr, stored_value));
                
                format!(
                    "{:04X}  {:<9} {:<31} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X}", 
                    self.pc,
                    byte_values.iter().map(|&b| format!("{:02X} ", b)).collect::<String>(), 
                    instruction, 
                    self.registers.a, 
                    self.registers.x, 
                    self.registers.y,
                    self.status,
                    self.registers.s,
                )
            }
            _ => String::from("unknown")
        }
    }
}
    