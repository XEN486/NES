// This was generated by a dumb python script! Don't edit!! //

impl<'a> CPU<'a> {
    pub fn get_cycles_for_opcode(&mut self, op: u8) -> u8 {
        match op {
            0x69 => 2, // ADC IMM
            0x65 => 3, // ADC ZP
            0x75 => 4, // ADC ZPX
            0x6d => 4, // ADC ABS
            0x7d => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteX), // ADC ABSX
            0x79 => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteY), // ADC ABSY
            0x61 => 6, // ADC INDX
            0x71 => 5 + self.pagecross_penalty(&AddressingMode::IndirectY), // ADC INDY
            0x0b => 2, // ANC IMM
            0x2b => 2, // ANC IMM
            0x29 => 2, // AND IMM
            0x25 => 3, // AND ZP
            0x35 => 4, // AND ZPX
            0x2d => 4, // AND ABS
            0x3d => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteX), // AND ABSX
            0x39 => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteY), // AND ABSY
            0x21 => 6, // AND INDX
            0x31 => 5 + self.pagecross_penalty(&AddressingMode::IndirectY), // AND INDY
            0x0a => 2, // ASL ACC
            0x06 => 5, // ASL ZP
            0x16 => 6, // ASL ZPX
            0x0e => 6, // ASL ABS
            0x1e => 7, // ASL ABSX
            0x90 => 2 + self.pagecross_penalty(&AddressingMode::Relative), // BCC REL
            0xB0 => 2 + self.pagecross_penalty(&AddressingMode::Relative), // BCS REL
            0xF0 => 2 + self.pagecross_penalty(&AddressingMode::Relative), // BEQ REL
            0x30 => 2 + self.pagecross_penalty(&AddressingMode::Relative), // BMI REL
            0xD0 => 2 + self.pagecross_penalty(&AddressingMode::Relative), // BNE REL
            0x10 => 2 + self.pagecross_penalty(&AddressingMode::Relative), // BPL REL
            0x50 => 2 + self.pagecross_penalty(&AddressingMode::Relative), // BVC REL
            0x70 => 2 + self.pagecross_penalty(&AddressingMode::Relative), // BVS REL
            0x24 => 3, // BIT ZP
            0x2c => 4, // BIT ABS
            0x00 => 7, // BRK IMP
            0x18 => 2, // CLC IMP
            0xd8 => 2, // CLD IMP
            0x58 => 2, // CLI IMP
            0xb8 => 2, // CLV IMP
            0xea => 2, // NOP IMP
            0x48 => 3, // PHA IMP
            0x68 => 4, // PLA IMP
            0x08 => 3, // PHP IMP
            0x28 => 4, // PLP IMP
            0x40 => 6, // RTI IMP
            0x60 => 6, // RTS IMP
            0x38 => 2, // SEC IMP
            0xf8 => 2, // SED IMP
            0x78 => 2, // SEI IMP
            0xaa => 2, // TAX IMP
            0x8a => 2, // TXA IMP
            0xa8 => 2, // TAY IMP
            0x98 => 2, // TYA IMP
            0xba => 2, // TSX IMP
            0x9a => 2, // TXS IMP
            0xc9 => 2, // CMP IMM
            0xc5 => 3, // CMP ZP
            0xd5 => 4, // CMP ZPX
            0xcd => 4, // CMP ABS
            0xdd => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteX), // CMP ABSX
            0xd9 => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteY), // CMP ABSY
            0xc1 => 6, // CMP INDX
            0xd1 => 5 + self.pagecross_penalty(&AddressingMode::IndirectY), // CMP INDY
            0xe0 => 2, // CPX IMM
            0xe4 => 3, // CPX ZP
            0xec => 4, // CPX ABS
            0xc0 => 2, // CPY IMM
            0xc4 => 3, // CPY ZP
            0xcc => 4, // CPY ABS
            0xc6 => 5, // DEC ZP
            0xd6 => 6, // DEC ZPX
            0xce => 6, // DEC ABS
            0xde => 7, // DEC ABSX
            0xca => 2, // DEX IMP
            0x88 => 2, // DEY IMP
            0xe8 => 2, // INX IMP
            0xc8 => 2, // INY IMP
            0x49 => 2, // EOR IMM
            0x45 => 3, // EOR ZP
            0x55 => 4, // EOR ZPX
            0x4d => 4, // EOR ABS
            0x5d => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteX), // EOR ABSX
            0x59 => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteY), // EOR ABSY
            0x41 => 6, // EOR INDX
            0x51 => 5 + self.pagecross_penalty(&AddressingMode::IndirectY), // EOR INDY
            0xe6 => 5, // INC ZP
            0xf6 => 6, // INC ZPX
            0xee => 6, // INC ABS
            0xfe => 7, // INC ABSX
            0x4c => 3, // JMP ABS
            0x6c => 5, // JMP IND
            0x20 => 6, // JSR ABS
            0xa9 => 2, // LDA IMM
            0xa5 => 3, // LDA ZP
            0xb5 => 4, // LDA ZPX
            0xad => 4, // LDA ABS
            0xbd => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteX), // LDA ABSX
            0xb9 => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteY), // LDA ABSY
            0xa1 => 6, // LDA INDX
            0xb1 => 5 + self.pagecross_penalty(&AddressingMode::IndirectY), // LDA INDY
            0xa2 => 2, // LDX IMM
            0xa6 => 3, // LDX ZP
            0xb6 => 4, // LDX ZPY
            0xae => 4, // LDX ABS
            0xbe => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteY), // LDX ABSY
            0xa0 => 2, // LDY IMM
            0xa4 => 3, // LDY ZP
            0xb4 => 4, // LDY ZPX
            0xac => 4, // LDY ABS
            0xbc => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteX), // LDY ABSX
            0x4a => 2, // LSR ACC
            0x46 => 5, // LSR ZP
            0x56 => 6, // LSR ZPX
            0x4e => 6, // LSR ABS
            0x5e => 7, // LSR ABSX
            0x09 => 2, // ORA IMM
            0x05 => 3, // ORA ZP
            0x15 => 4, // ORA ZPX
            0x0d => 4, // ORA ABS
            0x1d => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteX), // ORA ABSX
            0x19 => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteY), // ORA ABSY
            0x01 => 6, // ORA INDX
            0x11 => 5 + self.pagecross_penalty(&AddressingMode::IndirectY), // ORA INDY
            0x2a => 2, // ROL ACC
            0x26 => 5, // ROL ZP
            0x36 => 6, // ROL ZPX
            0x2e => 6, // ROL ABS
            0x3e => 7, // ROL ABSX
            0x6a => 2, // ROR ACC
            0x66 => 5, // ROR ZP
            0x76 => 6, // ROR ZPX
            0x6e => 6, // ROR ABS
            0x7e => 7, // ROR ABSX
            0xe9 => 2, // SBC IMM
            0xe5 => 3, // SBC ZP
            0xf5 => 4, // SBC ZPX
            0xed => 4, // SBC ABS
            0xfd => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteX), // SBC ABSX
            0xf9 => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteY), // SBC ABSY
            0xe1 => 6, // SBC INDX
            0xf1 => 5 + self.pagecross_penalty(&AddressingMode::IndirectY), // SBC INDY
            0x85 => 3, // STA ZP
            0x95 => 4, // STA ZPX
            0x8d => 4, // STA ABS
            0x9d => 5, // STA ABSX
            0x99 => 5, // STA ABSY
            0x81 => 6, // STA INDX
            0x91 => 6, // STA INDY
            0x86 => 3, // STX ZP
            0x96 => 4, // STX ZPY
            0x8e => 4, // STX ABS
            0x84 => 3, // STY ZP
            0x94 => 4, // STY ZPX
            0x8c => 4, // STY ABS
            0x04 => 3, // NOP ZP
            0x44 => 3, // NOP ZP
            0x64 => 3, // NOP ZP
            0x14 => 4, // NOP ZPX
            0x34 => 4, // NOP ZPX
            0x54 => 4, // NOP ZPX
            0x74 => 4, // NOP ZPX
            0xd4 => 4, // NOP ZPX
            0xf4 => 4, // NOP ZPX
            0x0c => 4, // NOP ABS
            0x1c => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteX), // NOP ABSX
            0x3c => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteX), // NOP ABSX
            0x5c => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteX), // NOP ABSX
            0x7c => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteX), // NOP ABSX
            0xdc => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteX), // NOP ABSX
            0xfc => 4 + self.pagecross_penalty(&AddressingMode::AbsoluteX), // NOP ABSX
            0x1a => 2, // NOP IMP
            0x3a => 2, // NOP IMP
            0x5a => 2, // NOP IMP
            0x7a => 2, // NOP IMP
            0xda => 2, // NOP IMP
            0xfa => 2, // NOP IMP
            0x02 => 2, // HLT IMP
            0x12 => 2, // HLT IMP
            0x22 => 2, // HLT IMP
            0x32 => 2, // HLT IMP
            0x42 => 2, // HLT IMP
            0x52 => 2, // HLT IMP
            0x62 => 2, // HLT IMP
            0x72 => 2, // HLT IMP
            0x92 => 2, // HLT IMP
            0xb2 => 2, // HLT IMP
            0xd2 => 2, // HLT IMP
            0xf2 => 2, // HLT IMP
            0x80 => 2, // SKB IMM
            0x82 => 2, // SKB IMM
            0x89 => 2, // SKB IMM
            0xc2 => 2, // SKB IMM
            0xe2 => 2, // SKB IMM
            0x07 => 5, // SLO ZP
            0x17 => 6, // SLO ZPX
            0x0f => 6, // SLO ABS
            0x1f => 7, // SLO ABSX
            0x1b => 7, // SLO ABSY
            0x03 => 8, // SLO INDX
            0x13 => 8, // SLO INDY
            0xe7 => 5, // ISC ZP
            0xf7 => 6, // ISC ZPX
            0xef => 6, // ISC ABS
            0xff => 7, // ISC ABSX
            0xfb => 7, // ISC ABSY
            0xe3 => 8, // ISC INDX
            0xf3 => 8, // ISC INDY
            0x47 => 5, // SRE ZP
            0x57 => 6, // SRE ZPX
            0x4f => 6, // SRE ABS
            0x5f => 7, // SRE ABSX
            0x5b => 7, // SRE ABSY
            0x43 => 8, // SRE INDX
            0x53 => 8, // SRE INDY
            0x67 => 5, // RRA ZP
            0x77 => 6, // RRA ZPX
            0x6f => 6, // RRA ABS
            0x7f => 7, // RRA ABSX
            0x7b => 7, // RRA ABSY
            0x63 => 8, // RRA INDX
            0x73 => 8, // RRA INDY
            _ => 2,
        }
    }
}
    